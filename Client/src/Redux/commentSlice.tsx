import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { AuthAPI, endpoints } from "../Service/ApiConfig";
import { RootState } from "./store";

interface UserType {
  id: number;
  username: string;
  avatar_user: string;
}

interface CommentType {
  id: number;
  user: UserType;
  comment: string;
  replies?: CommentType[];
}

interface CommentState {
  comments: CommentType[];
  loading: boolean;
  error: string | null;
}

const initialState: CommentState = {
  comments: [],
  loading: false,
  error: null,
};

export const replyToComment = createAsyncThunk<
  CommentType,
  { commentId: number; accessToken: string; comment: string }
>("comments/replyToComment", async ({ commentId, accessToken, comment }) => {
  try {
    const response = await AuthAPI(accessToken).post(
      endpoints["reply-comment"](commentId),
      { comment }
    );
    return response.data; // Assuming the response contains the newly added comment
  } catch (error) {
    throw new Error("Failed to reply to comment");
  }
});

const commentSlice = createSlice({
  name: "comments",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(replyToComment.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(replyToComment.fulfilled, (state, action) => {
        state.loading = false;
        state.error = null;
        const newComment = action.payload;
        const parentCommentIndex = state.comments.findIndex(
          (comment) => comment.id === newComment.id
        );
        if (parentCommentIndex !== -1) {
          state.comments[parentCommentIndex].replies = [
            ...(state.comments[parentCommentIndex].replies || []),
            newComment,
          ];
        } else {
          state.comments.push(newComment);
        }
      })
      .addCase(replyToComment.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message ?? "Failed to reply to comment";
      });
  },
});

// Selectors for accessing comments state
export const selectComments = (state: RootState) => state.comments.comments;
export const selectCommentsLoading = (state: RootState) =>
  state.comments.loading;
export const selectCommentsError = (state: RootState) => state.comments.error;

// Exporting the reducer generated by createSlice
export default commentSlice.reducer;
